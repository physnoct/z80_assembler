;The Z80 CPU uses an assembler generator
;https://github.com/hlorenzi/customasm
;Uses syntax for version 0.11.14

;FIXME the assembler can't differenciate between CPL or CP L
;FIXME the assembler can't parse EX AF,AF'


#bits 8

#subruledef ;asm_ver
{
    assembler_version => 2
}

#subruledef reg_table
{
    b => 0
    c => 1
    d => 2
    e => 3
    h => 4
    l => 5
    (hl) => 6
    a => 7
}

#subruledef regp_table
{
    bc => 0
    de => 1
    hl => 2
    sp => 3
}

#subruledef ops_table
{
    add => 0
    adc => 1
    sub => 2
    sbc => 3
    and => 4
    xor => 5
    or  => 6
    cp  => 7
}

#subruledef cond_table
{
    nz => 0
    z  => 1
    nc => 2
    c  => 3
    po => 4
    pe => 5
    p  => 6
    m  => 7
}

#subruledef bitops_table
{
    rlc => 0
    rrc => 1
    rl  => 2
    rr  => 3
    sla => 4
    sra => 5
    sll => 6
    srl => 7
}

#subruledef index_reg
{
    ix => 0xdd
    iy => 0xfd
}

#subruledef index9_reg
{
    ixl => 0x1dd
    iyl => 0x1fd
    ixh => 0x0dd
    iyh => 0x0fd
}

#ruledef
{
;	cpl			=> 0x2f
	ccf			=> 0x3f
	daa			=> 0x37
	di			=> 0xf3
	ei			=> 0xfb
	halt		=> 0x76
	nop 		=> 0x00
;   rla			=> 0x17
;	rra			=> 0x1f
	ret			=> 0xc9
	rlca		=> 0x07
	rrca		=> 0x15
	scf			=> 0x37

	ex de,hl	=> 0xeb
;	ex af,af'	=> 0x08
	exx			=> 0xd9
	ex (sp),hl	=> 0xe3

	push bc		=> 0xc5
	push de		=> 0xd5
	push hl		=> 0xe5
	push af		=> 0xf5

	pop bc		=> 0xc1
	pop de		=> 0xd1
	pop hl		=> 0xe1
	pop af		=> 0xf1

	rst 00h		=> 0xc7
	rst 08h		=> 0xcf
	rst 10h		=> 0xd7
	rst 18h		=> 0xdf
	rst 20h		=> 0xe7
	rst 28h		=> 0xef
	rst 30h		=> 0xf7
	rst 38h		=> 0xff

	rst 0		=> 0xc7
	rst 8		=> 0xcf
	rst 16		=> 0xd7
	rst 24		=> 0xdf
	rst 32		=> 0xe7
	rst 40		=> 0xef
	rst 48		=> 0xf7
	rst 56		=> 0xff

	jp (hl)		=> 0xe9
	ld	sp,hl	=> 0xf9

    ;----------
	neg				=> 0xed @ 0x44
	retn			=> 0xed @ 0x45
	reti			=> 0xed @ 0x4d
;	rrd				=> 0xed @ 0x67
;	rld				=> 0xed @ 0x6f
	im 0			=> 0xed @ 0x46
	im 1			=> 0xed @ 0x56
	im 2			=> 0xed @ 0x5e

    ldi  			=> 0xed @ 0xa0
    cpi  			=> 0xed @ 0xa1
    ini  			=> 0xed @ 0xa2
    outi 			=> 0xed @ 0xa3
;   ldd  			=> 0xed @ 0xa8
;   cpd  			=> 0xed @ 0xa9
    ind  			=> 0xed @ 0xaa
    outd 			=> 0xed @ 0xab
    ldir 			=> 0xed @ 0xb0
    cpir 			=> 0xed @ 0xb1
    inir 			=> 0xed @ 0xb2
    otir 			=> 0xed @ 0xb3
    lddr 			=> 0xed @ 0xb8
    cpdr 			=> 0xed @ 0xb9
    indr 			=> 0xed @ 0xba
    otdr 			=> 0xed @ 0xbb

    ld a,i 			=> 0xed @ 0x57
    ld i,a 			=> 0xed @ 0x47
    ld a,r 			=> 0xed @ 0x5f
    ld r,a 			=> 0xed @ 0x4f
    ;----------
	out ({port: u8}),a	=> 0xd3 @ port
	in a,({port: u8})	=> 0xdb @ port

    jr {addr}  => {disp = addr-(pc+2), assert(disp <= 0xff), 0x18 @ disp`8}
    djnz {addr}  => {disp = addr-(pc+2), assert(disp <= 0xff), 0x10 @ disp`8}

    jp {addr}		=> 0xc3 @ le(addr`16)
    call {addr}	=> 0xcd @ le(addr`16)

    jr nz,{addr}  => {disp = addr-(pc+2), assert(disp <= 0xff), 0x20 @ disp`8}
    jr nc,{addr}  => {disp = addr-(pc+2), assert(disp <= 0xff), 0x30 @ disp`8}
    jr z,{addr}  => {disp = addr-(pc+2), assert(disp <= 0xff), 0x28 @ disp`8}
    jr c,{addr}  => {disp = addr-(pc+2), assert(disp <= 0xff), 0x38 @ disp`8}

	jp {cond: cond_table},{addr}	=> (0xc2 | (cond`3 * 8))`8 @ le(addr`16)
    call {cond: cond_table},{addr}	=> (0xc4 | (cond`3 * 8))`8 @ le(addr`16)
	ret {cond: cond_table}			    => (0xc0 | (cond`3 * 8))`8

	ld {regd: reg_table},{regs: reg_table} => {op = (0x40 | (regd`3 * 8) | regs`3), assert (op != 0x76), op`8}

    ld (bc),a       => 0x02
    ld a,(bc)       => 0x0a
    ld (de),a       => 0x12
    ld a,(de)       => 0x1a
	ld ({addr}),hl 	=> 0x22 @ le(addr`16)
	ld hl,({addr}) 	=> 0x2a @ le(addr`16)
	ld ({addr}),a 	=> 0x32 @ le(addr`16)
	ld a,({addr}) 	=> 0x3a @ le(addr`16)

	ld 	{regp: regp_table},{value} => (0x01 | (regp`2 * 16))`8 @ le(value`16)
	ld 	{reg: reg_table},{value} => (0x06 | (reg`3 * 8))`8 @ value`8

	inc	{reg: reg_table} => (0x04 | (reg`3 * 8))`8
	dec	{reg: reg_table} => (0x05 | (reg`3 * 8))`8
	inc	{regp: regp_table} => (0x03 | (regp`2 * 16))`8
	dec	{regp: regp_table} => (0x0b | (regp`2 * 16))`8

	{ins: ops_table} a,{reg: reg_table} => (0x80 | (ins`3 * 8) | reg`3)`8
	{ins: ops_table} {reg: reg_table} => (0x80 | (ins`3 * 8) | reg`3)`8

	{ins: ops_table} a,{value} => (0xc6 | (ins`3 * 8))`8 @ value`8
	{ins: ops_table} {value} => (0xc6 | (ins`3 * 8))`8 @ value`8

	add hl,{regp: regp_table} => (0x09 | (regp`2 * 16))`8

    ;--------------------------
    ; Bit Instructions (CB)
    ;--------------------------
	{ins: bitops_table} {reg: reg_table} => 0xCB @ ((ins`3 * 8) | reg`3)`8
	bit {bit},{reg: reg_table} => 0xCB @ (0x40 | (bit`3 * 8) | reg`3)`8
	res {bit},{reg: reg_table} => 0xCB @ (0x80 | (bit`3 * 8) | reg`3)`8
	set {bit},{reg: reg_table} => 0xCB @ (0xc0 | (bit`3 * 8) | reg`3)`8

    ;--------------------------
    ; Misc Instructions (ED)
    ;--------------------------
	ld ({addr}),{regp: regp_table} => 0xed @ (0x43 | (regp`2 * 16))`8 @ le(addr`16)
	ld {regp: regp_table},({addr}) => 0xed @ (0x4b | (regp`2 * 16))`8 @ le(addr`16)

	sbc hl,{regp: regp_table} => 0xed @ (0x42 | (regp`2 * 16))`8
	adc hl,{regp: regp_table} => 0xed @ (0x4a | (regp`2 * 16))`8

	in {reg: reg_table},(c)  => 0xed @ (0x40 | reg`3 * 8)`8
	out (c),{reg: reg_table} => 0xed @ (0x41 | reg`3 * 8)`8

    ;--------------------------
    ; Index Instructions (DD,FD)
    ;--------------------------
	add {index: index_reg},{index: index_reg} => index`8 @ 0x29
	add {index: index_reg},{regp: regp_table} => {assert (regp != 2), index`8 @ (0x09 | (regp`2 * 16))`8}

	push {index: index_reg}		=> index`8 @ 0xe5
	pop {index: index_reg}		=> index`8 @ 0xe1
	ex (sp),{index: index_reg}  => index`8 @ 0xe3
	jp ({index: index_reg})		=> index`8 @ 0xe9
	ld sp,{index: index_reg}	=> index`8 @ 0xf9

	inc	{index: index_reg} 		=> index`8 @ 0x23
	dec	{index: index_reg} 		=> index`8 @ 0x2b

	;IXH,IXL,IYH,IYL
	ld {index: index9_reg},{value} => index[7:0] @ (0x26 | (index(8) * 8) @ value`8)`8

	ld {index: index9_reg},{reg: reg_table} => index[7:0] @ (0x60 | (index(8) * 8) | reg`3)`8
	ld {reg: reg_table},{index: index9_reg} => index[7:0] @ (0x44 | (reg`3 * 8) | index(8))`8

	inc {index: index9_reg}		   => index[7:0] @ (0x24 | (index(8) * 8))`8
	dec {index: index9_reg}		   => index[7:0] @ (0x25 | (index(8) * 8))`8

	{ins: ops_table} a,{index: index9_reg} => index[7:0] @ (0x84 | (ins`3 * 8) | index(8))`8
	{ins: ops_table} {index: index9_reg}   => index[7:0] @ (0x84 | (ins`3 * 8) | index(8))`8

	;IMM
	ld {index: index_reg},{value} => index`8 @ 0x21 @ le(value`16)

	;DIRECT
	ld ({addr}),{index: index_reg} => index`8 @ 0x22 @ le(addr`16)
	ld {index: index_reg},({addr}) => index`8 @ 0x2a @ le(addr`16)

	;INDEXED NULL
	ld ({index: index_reg}),{reg: reg_table} => {assert (reg`3 != 6), index`8 @ (0x70 | reg`3)`8 @ 0`8}
	ld {reg: reg_table},({index: index_reg}) => {assert (reg`3 != 6), index`8 @ (0x46 | (reg`3 * 8))`8 @ 0`8}

	ld ({index: index_reg}),{value} => index`8 @ 0x36 @ 0`8 @ value`8

	inc ({index: index_reg}) => index`8 @ 0x34 @ 0`8
	dec ({index: index_reg}) => index`8 @ 0x35 @ 0`8

	{ins: ops_table} a,({index: index_reg}) => index`8 @ (0x86 | (ins`3 * 8))`8 @ 0`8
	{ins: ops_table} ({index: index_reg})   => index`8 @ (0x86 | (ins`3 * 8))`8 @ 0`8

    ;Bit Instructions (CB)
	{ins: bitops_table} ({index: index_reg}) => index`8 @ 0xCB @ (0x06 | (ins`3 * 8))`8 @ 0`8
	bit {bit},({index: index_reg}) => index`8 @ 0xCB @ (0x46 | (bit`3 * 8))`8 @ 0`8
	res {bit},({index: index_reg}) => index`8 @ 0xCB @ (0x86 | (bit`3 * 8))`8 @ 0`8
	set {bit},({index: index_reg}) => index`8 @ 0xCB @ (0xc6 | (bit`3 * 8))`8 @ 0`8

	;INDEXED +
	ld ({index: index_reg}+{disp}),{reg: reg_table} => {assert (reg`3 != 6), index`8 @ (0x70 | reg`3)`8 @ disp`8}
	ld {reg: reg_table},({index: index_reg}+{disp}) => {assert (reg`3 != 6), index`8 @ (0x46 | (reg`3 * 8))`8 @ disp`8}

	ld ({index: index_reg}+{disp}),{value} => index`8 @ 0x36 @ disp`8 @ value`8

	inc ({index: index_reg}+{disp}) => index`8 @ 0x34 @ disp`8
	dec ({index: index_reg}+{disp}) => index`8 @ 0x35 @ disp`8

	{ins: ops_table} a,({index: index_reg}+{disp}) => index`8 @ (0x86 | (ins`3 * 8))`8 @ disp`8
	{ins: ops_table} ({index: index_reg}+{disp})   => index`8 @ (0x86 | (ins`3 * 8))`8 @ disp`8

    ;Bit Instructions (CB)
	{ins: bitops_table} ({index: index_reg}+{disp}) => index`8 @ 0xCB @ (0x06 | (ins`3 * 8))`8 @ disp`8
	bit {bit},({index: index_reg}+{disp}) => index`8 @ 0xCB @ (0x46 | (bit`3 * 8))`8 @ disp`8
	res {bit},({index: index_reg}+{disp}) => index`8 @ 0xCB @ (0x86 | (bit`3 * 8))`8 @ disp`8
	set {bit},({index: index_reg}+{disp}) => index`8 @ 0xCB @ (0xc6 | (bit`3 * 8))`8 @ disp`8

	;INDEXED -
	ld ({index: index_reg}-{disp}),{reg: reg_table} => {assert (reg`3 != 6), index`8 @ (0x70 | reg`3)`8 @ -disp`8}
	ld {reg: reg_table},({index: index_reg}-{disp}) => {assert (reg`3 != 6), index`8 @ (0x46 | (reg`3 * 8))`8 @ -disp`8}

	ld ({index: index_reg}-{disp}),{value} => index`8 @ 0x36 @ -disp`8 @ value`8

	inc ({index: index_reg}-{disp}) => index`8 @ 0x34 @ -disp`8
	dec ({index: index_reg}-{disp}) => index`8 @ 0x35 @ -disp`8

	{ins: ops_table} a,({index: index_reg}-{disp}) => index`8 @ (0x86 | (ins`3 * 8))`8 @ -disp`8
	{ins: ops_table} ({index: index_reg}-{disp})   => index`8 @ (0x86 | (ins`3 * 8))`8 @ -disp`8

    ;Bit Instructions (CB)
	{ins: bitops_table} ({index: index_reg}-{disp}) => index`8 @ 0xCB @ (0x06 | (ins`3 * 8))`8 @ -disp`8
	bit {bit},({index: index_reg}-{disp}) => index`8 @ 0xCB @ (0x46 | (bit`3 * 8))`8 @ -disp`8
	res {bit},({index: index_reg}-{disp}) => index`8 @ 0xCB @ (0x86 | (bit`3 * 8))`8 @ -disp`8
	set {bit},({index: index_reg}-{disp}) => index`8 @ 0xCB @ (0xc6 | (bit`3 * 8))`8 @ -disp`8

    ;--------------------------
    ; Z180 Instructions (ED)
    ;--------------------------
	mlt	{regp: regp_table} => 0xed @ (0x4c | (regp * 16))`8

	otim			=> 0xed @ 0x83
	otimr			=> 0xed @ 0x93
	otdm			=> 0xed @ 0x8b
	otdmr			=> 0xed @ 0x9b
	slp				=> 0xed @ 0x76

	tst {reg: reg_table} => 0xed @ (0x04 | reg`3 * 8)`8
	tst {value} => 0xed @ 0x64 @ value`8
	tstio {value} => 0xed @ 0x74 @ value`8

	in0  {reg: reg_table},({port}) => {assert (reg != 6), 0xed @ ((reg`3 * 8))`8 @ port`8}
	out0 ({port}),{reg: reg_table} => {assert (reg != 6), 0xed @ (0x01 | (reg`3 * 8))`8 @ port`8}
}
